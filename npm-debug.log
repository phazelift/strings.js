0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.15.5
3 info using node@v4.4.5
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/dvandersluis/devel/strings.js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/dvandersluis/.npm/strings.js/1.2.8/package.tgz not in flight; packing
9 verbose correctMkdir /Users/dvandersluis/.npm correctMkdir not in flight; initializing
10 verbose tar pack [ '/Users/dvandersluis/.npm/strings.js/1.2.8/package.tgz',
10 verbose tar pack   '/Users/dvandersluis/devel/strings.js' ]
11 verbose tarball /Users/dvandersluis/.npm/strings.js/1.2.8/package.tgz
12 verbose folder /Users/dvandersluis/devel/strings.js
13 info prepublish strings.js@1.2.8
14 verbose addLocalTarball adding from inside cache /Users/dvandersluis/.npm/strings.js/1.2.8/package.tgz
15 verbose correctMkdir /Users/dvandersluis/.npm correctMkdir not in flight; initializing
16 silly cache afterAdd strings.js@1.2.8
17 verbose afterAdd /Users/dvandersluis/.npm/strings.js/1.2.8/package/package.json not in flight; writing
18 verbose correctMkdir /Users/dvandersluis/.npm correctMkdir not in flight; initializing
19 verbose afterAdd /Users/dvandersluis/.npm/strings.js/1.2.8/package/package.json written
20 silly publish { name: 'strings.js',
20 silly publish   version: '1.2.8',
20 silly publish   description: 'A Javascript string manipulation library',
20 silly publish   main: 'strings.min.js',
20 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
20 silly publish   repository:
20 silly publish    { type: 'git',
20 silly publish      url: 'git+https://github.com/phazelift/strings.js.git' },
20 silly publish   keywords: [ 'string', 'strings', 'tool', 'utility' ],
20 silly publish   author:
20 silly publish    { name: 'Dennis Raymondo',
20 silly publish      email: 'phazelift@gmail.com',
20 silly publish      url: 'https://github.com/phazelift/' },
20 silly publish   license: 'GPL-3',
20 silly publish   bugs: { url: 'https://github.com/phazelift/strings.js/issues' },
20 silly publish   homepage: 'https://github.com/phazelift/strings.js',
20 silly publish   dependencies: { 'types.js': 'latest' },
20 silly publish   readme: 'strings.js\n==========\n<br/>\n\nA Javascript string manipulation library. No cryptic names, no methods returning undefined when you expect a string, etc.. Contains the usual suspects and some handy additions.\n\n**key features:**\n- most methods are available both static and dynamic\n- most methods are chainable for the dynamic part\n- Strings is 1 based; 1 is the first character of the string, -1 the last\n- can use negative numbers in almost all methods to target from the end of the string\n- can target with indexes and substring arguments mixed in some methods\n- all methods are dynamically type checked if needed\n- methods should always return the expected type\n\n<br/>\n\n______________________________________________\n### a quick example:\n```javascript\n// discover strings:\nvar strings= new Strings( \'asagcnaicrbtas\' )\n\t.reverse().remove(\'a\',\'b\',\'c\').upper(1).append(\'!\');\nconsole.log( strings.$ );\n// Strings!\nstrings.lower(\'s\').remove(\'!\').append( \'.js\' );\nconsole.log( strings.$ );\n// strings.js\n\n// 33 character password from all printable ascii:\nconsole.log( Strings.random(33) );\n// 9&@w=Q+|Gxe`NzL=\'Q8?4IxAg0dUyq}]s (pseudo)\n\n// or from numbers only:\nconsole.log( Strings.random(33, Strings.ASCII_RANGE_NUMBERS) );\n// 326579354237121359463402643861378\n\nconsole.log( Strings.sort(\'326579354237121359463402643861378\') );\n// \'011122223333333444455566667778899\'\n\nvar sparse= \'  \\t\\t max.   1  \\t  consecutive   \\t \\tspace! \\t \';\nconsole.log( Strings.oneSpaceAndTrim(sparse) );\n// max 1 consecutive space!\n\n// there is so much more, see below\n```\n\n___\n### node.js\n\nMade for browser and/or node.js. You can use `npm install strings.js` at the base directory of your project, after that:\n```javascript\nvar Strings= require( \'strings.js\' );\n```\n\n### AMD\n```javascript\nrequire.config({\n\tpaths: {\n\t\t\'strings\', [ \'path/to/strings.min.js\' ]\n\t}\n});\n\nrequire( [\'strings\'], function( Strings ){\n\tconsole.log( Strings.times(\':)\', 3) );\n\t// :):):)\n});\n```\n<br/>\n___\n### general description:\n\nBecause strings.js is build upon types.js it is very robust. Almost any String type argument accepts a Number type and viceversa.\nAll input and output is checked for type validity. If you expect a `typeof \'string\'`, you won\'t get `undefined` or\nany other type that can break following code.\n\nIMHO we shouldn\'t accept n-1 for strings in Javascript, it sucks and is not necessary.\nAll string indexes in strings.js are 1 based and translated to 0 based internally. Negative indexes can be used in most functions. -1 references\nthe last character in the string, 1 references the first character in the string.\n\nThe `new Strings()` object is made for chaining operations on strings, most of it\'s methods return their own context.\nTo return the actual value of the string, one can use `.get()` or `.$` or `.string`.\n\nAlmost all functionality of Strings prototypes, and some extra functions, are available from Strings static\nfunction library.\n\n### included:\n\ntypes.js essential type-checker/enforcer is included in strings.js. It is the fundament for strings.js and can be found after loading strings.js. \n```javascript\nvar types= Strings.Types;\n```\n\nThe types.js API can be found at: https://github.com/phazelift/types.js.\n\n### some more examples:\n```javascript\n\nvar Strings= require("strings.js");\t\t\t\t\t// with node.js\n\n// all comments reflect the value of s.string, except for .wrap\nvar s= new Strings( \'HELLO STRINGS!\' );\n\ns.lower(\'ello\', \'trings\').insert(\' library\', -1);\t// Hello Strings library!\ns.lower(\'h\').toCamel(\' \').remove(\'!\');\t\t\t\t// helloStringsLibrary\ns.unCamel(\' \').upper(1, 7).push(\'!\');\t\t\t\t// Hello Strings library!\ns.remove(\'Hello\', \'library\', \' \');\t\t\t\t\t// Strings!\ns.prepend(\'reversed \').reverse();\t\t\t\t\t// !sgnirtS desrever\ns.shuffle();\t\t\t\t\t\t\t\t\t\t// getriever!nrss dS (random on every run)\ns.set();\t\t\t\t\t\t\t\t\t\t\t// (.set with no usable argument wipes the string)\n\n// wrap \'Strings\' .wrap returns the wrapped string\ns.set(\'Strings\').setWrap(\'<3 \', \'!\').wrap;\t\t\t// <3 Strings!\n\n// apply the wrap to s while wrapping it once again\ns.applyWrap(\'I \', \'!!\')\ns.get();\t\t\t\t\t\t\t\t\t\t\t// I <3 Strings!!!\n\n// some static Methods\n// all comments reflect the value of s\ns= \'      spaces        or tabs     in here?        \' ;\ns= Strings.replace(s, \'not in s\', \'ignored..\');\t\t//        spaces        or tabs     in here?\nStrings.split(s+ \'\\t\\t  \\t \');\t\t\t\t\t\t// [ \'spaces\', \'or\', \'tabs\', \'in\', \'here?\' ]\ns= Strings.oneSpaceAndTrim(s);\t\t\t\t\t\t// spaces or tabs in here?\ns= Strings.remove(s, \' in here?\');\t\t\t\t\t// spaces or tabs\ns= Strings.xs(s, function(char, index){\t\t\t\t// SpAcEs oR TaBs\n    if (index %2 === 0)\n        return char.toUpperCase();\n    return true;\n});\nStrings.toCamel(\'a,comma,seperated,string?\', \',\');\t// aCommaSeperatedString?\nStrings.unCamel(\'aUnderscoredString\', \'_\');\t\t\t// a_underscored_string\nStrings.times(\'A\', 3);\t\t\t\t\t\t\t\t// AAA\ns= Strings.random(20);\t\t\t\t\t\t\t\t// j#4-s,t0]`bRd86!,>=Z (create password/random string)\ns= Strings.random(10, Strings.ASCII_RANGE_NUMBERS);\n\t\t\t\t\t\t\t\t\t\t\t\t\t// 6206002371\t(create random string in specific range)\n// find more examples in the API below\n```\n___\nAPI\n---\n\nIn this API, the type of a dynamic Strings object is denoted with `<this>`. Therefore, all methods returning\n`<this>` can be used for chaining.\n\nthis.string represents the actual state of the internal dynamic string.\n____\n**Strings** constructor\n> `<this> Strings( <string>/<number> string,  [string1, ..., stringN] )`\n\n> Calls .set internally, so .set rules apply, see below.\n```javascript\nvar string= new Strings( \'All those characters..\' );\n```\n\n**Strings.prototype.string**\n> `<string> string`\n\n> Internal/contextual string, do not set directly, use .set() instead to prevent bugs. You can of course use\n> .string as a getter to fetch the string.\n```javascript\n\tvar myString= new Strings(\'The actual string\');\n\tconsole.log( myString.string );\n\t// The actual string\n```\n\n**Strings.prototype.set**\n> `<this> set( <string>/<number> string,  [string1, ..., stringN] )`\n\n> \tSets this.string to string arguments, or resets this.string to \'\' if no argument is given. Arguments that are not of\n> type String or Number will not be set.\n```javascript\nvar string= new Strings();\nstring.set(\'James \', \'Bond \', \'is \', 0, 0, 7);\n// James Bond is 007\n```\n**Strings.prototype.sort**\n> `<this> sort()`\n\n> Returns this.string\'s characters sorted by their ordinal value.\n```javascript\nvar string= new Strings( \'sort\', \'charcters\', \'and\', 5, 2, 9, 1 );\nconsole.log( string.sort().$ );\n// 1259aaccdehnorrrsstt\n```\n\n**Strings.prototype.random**\n> `<this> random( <string>/<number> amount, <array> asciiRange= Chars.ASCII_RANGE_ALL )`\n\n> Applies a random string with amount characters within asciiRange. asciiRange is an Array with two indices; [min, max].\n```javascript\n// 10 random special characters\nconsole.log( new Strings().random(10, Strings.ASCII_RANGE_SPECIAL_1) );\n// &!! %.,./*\n```\n\n**Strings.prototype.xs**\n> `<string> xs( <function> callback(char, index){} )`\n\n> Access every index of this.string and apply the result of the callback to it.\n\n> If the callback returns true, char is applied. If the callback returns false or undefined, char will be skipped.\n> Any character, String or Number returned by callback will be applied to index in string.\n```javascript\nvar string= new Strings(\'It is easy to change characters in any way!\');\nstring.xs( function(ch){\n\treturn (ch === \' \') ? \' * \' : true;\n});\nconsole.log( string.$ );\n// It * is * easy * to * change * characters * in * any * way!\n```\n\n**Strings.prototype.times**\n> `<this> times( <string>/<number> amount )`\n\n> Duplicates this.string by amount, or leaves this.string unchanged if no amount is given.\n```javascript\nconsole.log( new Strings(\'<3 \').times(3).$ );\n// <3 <3 <3\n```\n\n**Strings.prototype.get**\n> `<string> get( <string>/<number> indexes, [index1, ..., [indexN] )`\n\n> Returns one or more indexes in a new string, without affecting this.string.\n> Without arguments get() returns the full this.string.\n```javascript\nvar string= new Strings(\'sdblaem\');\nconsole.log( string.get(5, 1, 1, -2, -1, 3, 4, -2, 2) );\n// assembled\n```\n\n**Strings.prototype.$**\n> `<string> $` (getter)\n\n> Returns this.get()\n\n**Strings.prototype.copy**\n> `<string> copy( <string>/<number> offset, <string>/<number> amount )`\n\n> Returns a substring of this.string from offset to offset+amount.\n> If amount is not given, all characters from offset to end of this.string are returned.\n> If no arguments are given, a full copy of this.string is returned.\n```javascript\nvar string= new Strings(\'copy a part\');\nconsole.log( string.copy(-4, 4) );\n// part\n```\n\n**Strings.prototype.empty**\n> `<boolean> empty()`\n\n> Returns true if this.string.length is < 1.\n```javascript\nconsole.log( new Strings().empty() );\n// true\n```\n\n**Strings.isAlpha**\n> `<boolean> isAlpha()`\n\n> Returns true if this.string is in the range [\'a\'..\'z\'] and/or [\'A\'..\'Z\']\n```javascript\nconsole.log( new Strings(\'abcIsAlpha\').isAlpha() );\n// true\n```\n\n**Strings.isNumeric**\n> `<boolean> isNumeric()`\n\n> Returns true if this.string is in the range [\'0\'..\'9\']\n```javascript\nconsole.log( new Strings(\'123\').isNumeric() );\n// true\n```\n\n**Strings.isAlphaNumeric**\n> `<boolean> isAlphaNumeric()`\n\n> Returns true if this.string is in the range [\'a\'..\'z\'] and/or [\'A\'..\'Z\'] and/or [\'0\'..\'9\']\n```javascript\nconsole.log( new Strings(\'abc123\').isAlphaNumeric() );\n// true\n```\n\n**Strings.isSpecial**\n> `<boolean> isSpecial()`\n\n> Returns true if this.string is *NOT* in the range [\'a\'..\'z\'] and/or [\'A\'..\'Z\'] and/or [\'0\'..\'9\'], but *in* the\n> range of all printable ascii characters.\n```javascript\nconsole.log( new Strings(\'!@ #$\').isSpecial() );\n// true\n// note that space is a special character!\n```\n\n**Strings.prototype.isSpace**\n> `<boolean> isSpace()`\n\n> Returns true if this.string contains no characters other than spaces and/or horizontal tabs.\n```javascript\nconsole.log( new Strings(\' \\t \').isSpace() );\n// true\n```\n\n**Strings.prototype.isUpper**\n> `<boolean> isUpper()`\n\n> Returns true if this.string contains only uppercase characters.\n```javascript\nconsole.log( new Strings(\'ABC\').isUpper() );\n// true\n```\n\n**Strings.prototype.hasUpper**\n> `<boolean> hasUpper()`\n\n> Returns true if this.string contains at least one uppercase character.\n```javascript\nconsole.log( new Strings(\'aBc\').hasUpper() );\n// true\n```\n\n**Strings.prototype.isLower**\n> `<boolean> isLower()`\n\n> Returns true if this.string contains only lowercase characters.\n```javascript\nconsole.log( new Strings(\'abc\').isLower() );\n// true\n```\n\n**Strings.prototype.push**\n> `<this> push ( <string>/<number> string, [string1, ..., stringN] )`\n\n> Append string(s) to this.string.\n```javascript\nvar string= new Strings(\'add to this \').push(\'string\', \'?\');\nconsole.log( string.$ );\n// add to this string?\n```\n\n**Strings.prototype.pop**\n> `<this> pop ( <string>/<number> amount )`\n\n> \tRemoves amount characters starting from the end of this.string going backwards, no arguments pops only one\n> character.\n```javascript\nvar string= new Strings(\'remove characters from the end\').pop(13);\nconsole.log( string.$ );\n// remove characters\n```\n\n**Strings.prototype.prepend**\n> `<this> prepend ( <string>/<number> string, [string1, ..., stringN] )`\n\n> \tPrepend this.string with string(s).\n```javascript\nvar string= new Strings(\'to prepend\').prepend(1, \'. some\', \' strings \');\nconsole.log( string.$ );\n// 1. some strings to prepend\n\n**Strings.prototype.insert**\n> `<this> insert ( <string>/<number> insertion, <string>/<number> pos, [pos, ..., posN] )`\n\n> Insert insertion at pos in this.string, the insertion will be inserted before the character at pos. If insertion is invalid,\n> or index is less than the negative length of the string, insertion will be prepended to the string. If pos is greater than\n> the length of the string, insertion will be appended to the string.\n\n> Multiple positions are allowed, but duplicate positions ignored. Positions are relative to the string before insertion,\n> so, if our string is `\'123\'` and we insert `\'-\'` at position 2 and 3, we will get `\'1-2-3\'`.\n```javascript\nvar string= new Strings(\'wherearethespaces?\').insert(\' \', 6, 9, 12 );\nconsole.log( string.$ );\n// where are the spaces?\n\n**Strings.prototype.trim**\n> `<this> trim()`\n\n> Removes white space characters, including spaces, tabs, form feeds, line feeds and other Unicode spaces, from the\n> beginning and the end of the string.\n```javascript\nvar string= new Strings(\'   \\t remove leading and trailing tabs and spaces    \\t\').trim();\nconsole.log( string.$ );\n// remove leading and trailing tabs and spaces\n```\n\n**Strings.prototype.trimLeft**\n> `<this> trimLeft()`\n\n> Removes white space characters, including spaces, tabs, form feeds, line feeds and other Unicode spaces\n> from the start of this.string.\n\n**Strings.prototype.trimRight**\n> `<this> trimRight()`\n\n> Removes white space characters, including spaces, tabs, form feeds, line feeds and other Unicode spaces\n> from the end of this.string.\n\n**Strings.prototype.oneSpace**\n> `<this> oneSpace()`\n\n> \tReduces all consecutive horizontal tabs and/or spaces found in this.string to a maximum of one.\n```javascript\nvar string= new Strings(\'sparse   \t \t strings   \\t  cleaned  up!\').oneSpace();\nconsole.log( string.$ );\n// sparse strings cleaned up!\n\n**Strings.prototype.oneSpaceAndTrim**\n> `<this> oneSpaceAndTrim()`\n\n>\tApplies this.trim() and this.oneSpace() on this.string.\n```javascript\nvar string= new Strings(\'  \\t  sparse    strings   \\t  cleaned  up!  \\t \').oneSpaceAndTrim();\nconsole.log( string.$ );\n// sparse strings cleaned up!\n\n**Strings.prototype.find**\n> `<array> find( <string>/<number> substring, <string> flags )`\n\n> Returns an array containing all indexes where substring is found, or an empty array if there is no match.\n> If flags is set to an empty string, only the first occurance of the found substring will be pushed into the array.\n> find internally uses RegExp, so flags is 100% compatible with RegExp flags.\n```javascript\nconsole.log( new Strings(\'find character positions\').find(\' \') );\n// [ 5, 15 ]\n```\n\n**Strings.prototype.count**\n> `<number> count( <string>/<number> substring )`\n\n> Returns the amount of times substring is found in this.string.\n```javascript\nconsole.log( new Strings(\'now count the spaces in this string\').count(\' \') );\n// 6\nconsole.log( new Strings(\'count substrings in this string\').count(\'string\') );\n// 2\n```\n\n**Strings.prototype.contains**\n> `<boolean> contains( <string>/<number> string )`\n\n> Returns true if string is a substring of this.string, false if not.\n```javascript\nconsole.log( new Strings(\'any spaces in here?\').contains(\'spaces\') );\n// true\n```\n\n**Strings.prototype.between**\n> `<string> between( <string>/<number> before, <string>/<number> after )`\n\n> Returns the string between before and after. The first occurance of before and the last occurance of\n> after are matched. An empty string is returned in case of no match.\n```javascript\nconsole.log( new Strings(\'what is (between) the braces?\').between(\'(\', \')\') );\n// between\n```\n\n**Strings.prototype.slice**\n> `<this> slice( <string>/<number> offset, <string>/<number> amount )`\n\n> Crop this.string from offset with amount.\n```javascript\nconsole.log( new Strings(\'fetch a slice of this\').slice(9, 5).$ );\n// slice\n```\n\n**Strings.prototype.crop**\n> An alias for slice.\n\n**Strings.prototype.truncate**\n> `<this> truncate( <string>/<number> offset, <string>/<number> suffix )`\n\n> Removes all characters after offset from this.string, and optionally add a suffix.\n```javascript\nvar string= new Strings(\'is truncate pop with a suffix?\')\n\t.truncate(15, \'? No, it counts from the start, and you can add a suffix.\');\nconsole.log( string.$ );\n// is truncate pop? No, it counts from the start and you can add a suffix.\n```\n\n**Strings.prototype.remove**\n> `<this> remove( <string>/<number> string,  [string1, ..., stringN] )`\n\n> - Arguments are substrings - Remove all found/matching strings given as arguments from this.string.\n```javascript\nvar string= new Strings(\'what is the lifetime of a string?\');\nconsole.log( string.remove( \'what\', \'is \', \'?\').$ );\n// the lifetime of a string\n```\n\n**Strings.prototype.removeRange**\n> `<this> removeRange( <string>/<number> index, <string>/<number> amount= 1 )`\n\n> Removes amount character(s) from this.string, starting from index.\n```javascript\nvar string= new Strings(\'what is the lifetime of a string?\');\nconsole.log( string.removeRange(8, 16).$ );\n// what is a string?\n```\n\n**Strings.prototype.removePos**\n> `<this> removePos( <string>/<number> positions, [pos1, ..., posN] )`\n\n> - Arguments are indices - Remove all (one character) positions given as arguments, from this.string.\n```javascript\nvar string= new Strings(\'remove single characters from this string?\');\nconsole.log( string.removePos(-1, 1, 2) );\n// move single characters from this string\n```\n\n**Strings.prototype.replace**\n> `<this> replace( <string>/<number>/<regexp> subString, <string>/<number> replacement, <string> flags )`\n\n> \tReplace the first or every occurence of subString in this.string with replacement depending on flags.\n>\tAs Strings.replace internally uses RegExp you can set flags to your liking. flags defaults to \'g\' (global)\n```javascript\nconsole.log( new Strings(\'almost standard..\').replace(\'almost\', \'not so\').$ );\n// not so standard\n```\n\n**Strings.prototype.reverse**\n> `<this> reverse()`\n\n> \tReverses this.string.\n```javascript\nconsole.log( new Strings(\'desrever\').reverse().$ );\n// reversed\n```\n\n**Strings.prototype.upper**\n> `<this> upper( <string>/<number> arg,  [arg1, ..., argN] )`\n\n> \tIf arg(s) are number(s), the character(s) in this.string at index or indexes are changed to uppercase.\n> \tIf arg(s) are character, all matching characters in this.string are changed to uppercase.\n> \tMultiple character strings are matched as well.\n```javascript\nconsole.log( new Strings(\'change case\').upper(\'c\').$ );\n// Change Case\nconsole.log( new Strings(\'change case\').upper(1, 3, 5, -2, -4).$ );\n// ChAnGe CaSe\n```\n\n**Strings.prototype.lower**\n> `<this> lower( <string>/<number> arg,  [arg1, ..., argN] )`\n\n> Same as .upper, it only changes uppercase characters to lowercase.\n\n**Strings.prototype.shuffle**\n> `<this> shuffle()`\n\n> \tRandomizes(pseudo) the position of each character in this.string.\n```javascript\nconsole.log( new Strings(\'shuffle\').shuffle().$ );\n// fsfluhe (pseudo random)\n```\n\n**Strings.prototype.toCamel**\n> `<this> toCamel( <string> char= \'-\' )`\n\n> \tConverts every following character matching char in this.string to uppercase, and removes char.\n```javascript\nconsole.log( new Strings(\'underscores_to_camels\').toCamel(\'_\').$ );\nunderscoresToCamels\n```\n\n**Strings.prototype.unCamel**\n> `<this> unCamel( <string>/<number> insertion= \'-\' )`\n\n> Converts this.string camels to lower-case with insertion prepended. Insertion defaults to dashes, but can be set\n> to any character of your liking.\n```javascript\nconsole.log( new Strings(\'underscoresFromCamels\').unCamel(\'_\').$ );\nunderscores_from_camels\n```\n\n**Strings.prototype.startsWith**\n> `<boolean> startsWith( <string>/<number> start )`\n\n> Returns true if this.string starts with start, false if not.\n```javascript\nconsole.log( new Strings(\'abc 123\').startsWith(\'ab\') );\n// true\n```\n\n**Strings.prototype.endsWith**\n> `<boolean> endsWith( <string>/<number> ending )`\n\n> Returns true if this.string ends with ending, false if not.\n```javascript\nconsole.log( new Strings(\'abc 123\').endsWith(\'23\') );\n// true\n```\n\n**Strings.prototype.setWrap**\n> `<this> setWrap( <string>/<number> prepend, <string>/<number> append )`\n\n> Sets a wrapper that wraps this.string between prepend and append.\n> Output of .get() or .$ is not affected by setWrap. Fetch .wrap to return the wrapped this.string\n\n> You can add to prepend and append (outwards) by calling .setWrap again.\n```javascript\nvar string= new Strings(\'<3\').setWrap( \'she \', \' me\');\n// string is unchanged\nconsole.log( string.$ );\n// <3\n\n// but .wrap shows the string wrapped\nconsole.log( string.wrap+ \'!\' );\n// she <3 me!\n\n// and why not wrap once more:\nstring.setWrap(\'Will \', \' forever?\');\nconsole.log( string.wrap );\n// Will she <3 me forever?\n\n// still not applied to string\nconsole.log( string.$+ \'..\' );\n// <3..\n\n// use .setWrap to apply the wrap to string\nstring.applyWrap();\nconsole.log( string.$ );\n// Will she <3 me forever?\n```\n\n**Strings.prototype.removeWrap**\n> `<this> removeWrap()`\n\n> Removes the wrapper.\n\n**Strings.prototype.applyWrap**\n> `<this> applyWrap( <string>/<number> prepend, <string>/<number> append )`\n\n> Calls setWrap and wraps the wrapper with prepend and append if set already. Then the total wrap is applied\n> to this.string. Finally the wrapper method will be reset with removeWrap.\n```javascript\nvar string= new Strings(\'<3\').applyWrap( \'She \', \'\\\'s me!\');\nconsole.log( string.$ );\n// She <3\'s me!\n```\n\n**Strings.prototype.wrap**\n> `<string> wrap` (getter)\n\n> Returns this.string wrapped by the text set with setWrap(). If setWrap() has not been called yet, only this.string\n> will return.\n\n________________\nStatic functions\n----------------\n\nSee descriptions for similar functions above.\n______________________________________________\n\n**Strings.create**\n> `<string> Strings.create( <string>/<number> string,  [string1, ..., stringN] )`\n\n> Returns an assembled string from given arguments of type String. Non String arguments are omitted.\n> If no valid arguments are given, an empty string will be returned.\n\n**Strings.get**\n> `<string> Strings.get( <string>/<number> string, [<number> position1, ..., positionN] )`\n\n> Returns a string containing every position from string given, in the order they were given.\n> Invalid positions are ignored and won\'t disrupt the process.\n\n**Strings.sort**\n> `<string> Strings.sort( <string>/<number> string )`\n\n**Strings.random**\n> `<string> Strings.random( <string>/<number> amount= 1, <array> asciiRange= Chars.ASCII_RANGE_ALL )`\n\n**Strings.times**\n> `<string> Strings.times( <string>/<number> string, <string>/<number> amount )`\n\n**Strings.regEscape**\n> `<string> Strings.regEscape( <string>/<number> string )`\n\n> Returns string with all found special regular expression characters in string escaped.\n\n**Strings.empty**\n> `<boolean> Strings.empty( <string>/<number> string )`\n\n**Strings.isAlpha**\n> `<boolean> Strings.isAlpha( <string>/<number> string,  [string1, ..., stringN] )`\n\n**Strings.isNumeric**\n> `<boolean> Strings.isNumeric( <string>/<number> string,  [string1, ..., stringN] )`\n\n**Strings.isAlphaNumeric**\n> `<boolean> Strings.isAlphaNumeric( <string>/<number> string,  [string1, ..., stringN] )`\n\n**Strings.isSpecial**\n> `<boolean> Strings.isSpecial( <string>/<number> string )`\n\n> Returns true if string contains only special ascii characters.\n\n**Strings.isSpace**\n> `<boolean> Strings.isSpace( <string>/<number> string )`\n\n**Strings.isUpper**\n> `<boolean> Strings.isUpper( <string>/<number> string )`\n\n**Strings.hasUpper**\n> `<boolean> Strings.hasUpper( <string>/<number> string )`\n\n**Strings.isLower**\n> `<boolean> Strings.isLower( <string>/<number> string )`\n\n**Strings.xs**\n> `<string> Strings.xs( <string>/<number> string, <function> callback( <string> char, <number> index ){} )`\n\n**Strings.copy**\n> `<string> Strings.copy( <string>/<number> string, <string>/<number> offset, <string>/<number> amount )`\n\n**Strings.replace**\n> `<string> Strings.replace( <string>/<number> string, <string>/<number>/<regexp> toReplace, <string>/<number> replacement, <string> flags )`\n\n**Strings.trim**\n> `<boolean> Strings.trim( <string>/<number> string )`\n\n**Strings.trimLeft**\n> `<boolean> Strings.trimLeft( <string>/<number> string )`\n\n**Strings.trimRight**\n> `<boolean> Strings.trimRight( <string>/<number> string )`\n\n**Strings.oneSpace**\n> `<boolean> Strings.oneSpace( <string>/<number> string )`\n\n**Strings.oneSpaceAndTrim**\n> `<boolean> Strings.oneSpaceAndTrim( <string>/<number> string )`\n\n**Strings.toCamel**\n> `<string> Strings.toCamel( <string>/<number> string, <string>/<number> char= \'-\' )`\n\n**Strings.unCamel**\n> `<string> Strings.unCamel( <string>/<number> string, <string>/<number> insertion= \'-\' )`\n\n**Strings.shuffle**\n> `<string> Strings.shuffle( <string>/<number> string )`\n\n**Strings.find**\n> `<array> Strings.find( <string>/<number> string, <string>/<number> query, <string> flags )`\n\n**Strings.count**\n> `<number> Strings.count( <string>/<number> string, <string>/<number> query )`\n\n**Strings.contains**\n> `<boolean> Strings.contains( <string>/<number> string, <string>/<number> subString )`\n\n**Strings.between**\n> `<string> Strings.between( <string>/<number> string, <string>/<number> before, <string>/<number> after )`\n\n**Strings.slice**\n> `<string> Strings.slice( <string>/<number> string, <string>/<number> start, <string>/<number> size )`\n\n**Strings.crop**\n> An alias for Strings.slice.\n\n**Strings.truncate**\n> `<string> Strings.truncate( <string>/<number> string, <string>/<number> length, <string>/<number> suffix= \'\' )`\n\n**Strings.pop**\n> `<string> Strings.pop( <string>/<number> string, <string>/<number> amount)`\n\n**Strings.split**\n> `<array> Strings.split( <string>/<number> string, <string>/<number> delimiter )`\n\n> Warning, this is a custom .split. It splits the string into an array by delimiter, with the difference\n> that it destroys spaces, tabs, line-feeds, carriage-returns and skips empty strings to avoid ending up with a\n> sparse array.\n\n> The default delimiter is a (white)space. delimiter is truncated to 1 character.\n\n**Strings.reverse**\n> `<string> Strings.reverse( <string>/<number> string )`\n\n**Strings.upper**\n> `<string> Strings.upper( <string> string, <string>/<number> args [args1, ..., argsN] )`\n\n**Strings.lower**\n> `<string> Strings.lower( <string> string, <string>/<number> args [args1, ..., argsN] )`\n\n**Strings.insert**\n> `<string> Strings.insert( <string>/<number> string, <string>/<number> index, <string>/<number> insertion )`\n\n**Strings.removeRange**\n> `<string> Strings.removeRange( <string>/<number> string, <string>/<number> offset, <string>/<number> amount )`\n\n**Strings.removePos**\n> `<string> removePos( <string>/<number> positions, [pos1, ..., posN] )`\n\n**Strings.remove**\n> `<string> Strings.remove( <string>/<number> string, <string>/<number> toRemove )`\n\n**Strings.startsWith**\n> `<boolean> Strings.startsWith( <string>/<number> string, <string>/<number> start )`\n\n**Strings.endsWith**\n> `<boolean> Strings.endsWith( <string>/<number> string, <string>/<number> end )`\n\n**Strings.wrap**\n> `<object> Strings.wrap( <string>/<number> prepend, <string>/<number> append )`\n\n> A functional method. Returns a function that takes a string as argument. The string passed as argument when calling\n> the function will be returned wrapped, by prepend and append.\n\n> You can add to prepend and append by calling .wrap on the wrapper as in myWrapper.wrap( \'outer prepend\', \'outer append\' );\n\n\n___________________\n###Tools and imports from my other libraries:\n\n\n**Strings.ASCII_RANGE_...**\n\n|Range\t\t\t\t\t\t\t\t\t\t|Ordinal range\t|Characters found in range\n|:----------------------------------|--------------|:-----------------------------\n|Strings.ASCII_RANGE_UPPERCASE\t\t|[65,90]\t\t\t|`ABCDEFGHIJKLMNOPQRSTUVWXYZ`\n|Strings.ASCII_RANGE_LOWERCASE\t\t|[97,122]\t\t|`abcdefghijklmnopqrstuvwxyz`\n|Strings.ASCII_RANGE_NUMBERS\t\t\t|[48,57]\t\t\t|`0123456789`\n|Strings.ASCII_RANGE_SPECIAL_1\t\t|[32,47]\t\t\t|` !"#$%&\'()*+,-./`\n|Strings.ASCII_RANGE_SPECIAL_2\t\t|[58,64]\t\t\t|`:;<=>?@`\n|Strings.ASCII_RANGE_SPECIAL_3\t\t|[91,96]\t\t\t|`[\\]^_`\\`\n|Strings.ASCII_RANGE_SPECIAL_4\t\t|[123,126]\t\t|`{|}~`\n|Strings.ASCII_RANGE_ALL(printable)\t|[32,126]\t\t|` !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`\\``abcdefghijklmnopqrstuvwxyz{|}~`\n\n**Strings.REGEXP_SPECIAL_CHARS**\n> `<array> Strings.REGEXP_SPECIAL_CHARS`\n\n> An array holding all special characters used in regular expressions.\n\n**Strings.ascii**\n> `<string> Strings.ascii( <string>/<number> ordinalNr )`\n\n> Returns the ascii character with ordinalNr.\n\n**Strings.ordinal**\n> `<number> Strings.ordinal( <string>/<number> char )`\n\n> Returns the ordinal value of an Ascii character.\n\n**Strings.random**\n>`Strings.random( asciiRange= Strings.ASCII_RANGE_ALL )`\n\n> Returns a random character within the given asciiRange. See format above.\n\n\n**Strings.inRange**\n> `<boolean> Strings.inRange( <string>/<number> nr, <array> range )`\n\n> Returns true if nr is in range, including the bounds of range. range is an Array with two indices; [min, max].\n\n**Strings.limitNumber**\n> `<number> Strings.limitNumber( <string>/<number> nr, <array> range )`\n\n> Returns nr limited to range. range is an Array with two indices; [min, max].\n\n**Strings.randomNumber**\n> `<number> Strings.randomNumber( <string>/<number> min, <string>/<number> max )`\n\n> Returns a (pseudo) random number in the range min..max.\n\n**Strings.shuffleArray**\n> `<array> Strings.shuffleArray( <array> array )`\n\n> Returns array (pseudo)randomly shuffled.\n\n**Strings.positiveIndex**\n> `<number> Strings.positiveIndex( <string>/<number> index, <string>/<number> limit )`\n\n> Returns an absolute, 0 based index from a 1 based index positive or negative number. If index is negative then\n> it`s relative positive number will be returned. If index is 0 or exceeding limit, false is returned.\n\n**Strings.insertSort**\n> `<array> Strings.insertSort( <array> array )`\n\n> A basic insert-sort on array. Return value is just for convenience.\n\n**Strings.noDupAndReverse**\n> `<array> Strings.noDupAndReverse( <array> array )`\n\n> Removes duplicates from, and reverses the array. Only works on sorted arrays, which you can do with insertSort.\n\n_________________\n##types.js\n\n> The full library (~2kB) is included in strings.js. Check https://github.com/phazelift/types.js for general info and API.\n\n\n__________\n\nchange log\n==========\n**1.2.8**\n\nRemoves the included types.js code. For node.js there are no changes, but if you want to load strings.js in the browser you\'ll now first have to load types.js:\n\n>```html\n<script src="your-path-to-js-libs/types.min.js"></script>\n<script src="your-path-to-js-libs/strings.min.js"></script>\n```\n\n---\n**1.2.7**\n\nUpdated the included types.js to (the current) version 1.5.0\n___\n**1.2.5**\n\nAdded AMD support.\n___\n**1.2.3**\n\nAdded Strings.prototype.isUpper(), Strings.prototype.isLower(), Strings.isUpper() and Strings.isLower().\nThey were missing after removal in 1.2.0... Also added Strings.hasUpper().\n___\n**1.2.2**\n\nUpdated the included types.js to (the current) version 1.4.2\n___\n**1.2.0**\n\nStarted improving the running-speed of all methods. It\'s a work in progress.\n\nRemoved due to optimization:\n-\tChars.isUpper, Chars.isLower, Chars.isAlpha, Chars.isNumeric, Chars.isSpecial, Chars.isAlphaNumeric\n\nOptimized (some stage..):\n-\tStrings.isUpper, Strings.isLower, Strings.isAlpha, Strings.isNumeric, Strings.isSpecial,\n\tStrings.isAlphaNumeric, Strings.startsWith\n\nAdded elementary running-speed results, to be found in tests.\n\nUpdated Jasmine tests and readme.\n__________________________________\n**1.1.9**\n\nMade available `Strings.insertSort()` and `Strings.noDupAndReverse()` in the Tools section, I can now remove them from words.js.\n\nUpdated readme.\n\n__________________________________\n**1.1.7**\n\nAdded:\n-\t`Strings.sort( string )`, `Strings.prototype.sort()`, now you can sort the characters of your string by ordinal value.\n\nChanged:\n-\tStrings.insert now allows for inserting to multiple positions. Invalid or no index given will now return the original string.\n\nUpdated:\n-\tReadme\n-\tJasmine tests\n\n___________________________________\n**1.1.4**\n\nUpdated types.js to version 1.3.4\n___________________________________\n**1.1.3**\n\nAdded Jasmine tests for the static part of the library. The dynamic part was thorougly tested already, but I hope\nto add soon some tests for that as well.\n\ntypes.js included in strings.js is updated to the latest version now.\n\nMany little enhancements and a few minor bug fixes.\n\nAdded:\n- Strings.get().\n\nRemoved:\n\n- Strings.force, as force is now implemented in types.js. Use Strings.forceString, or the other force\'Types\'\nfrom types.js.\n\n__________',
20 silly publish   readmeFilename: 'README.md',
20 silly publish   gitHead: 'd92ddc8730f83dc428edd81237262dbb1eb68392',
20 silly publish   _id: 'strings.js@1.2.8',
20 silly publish   _shasum: '3300839fcbfd5ec13e0bdd347bb77c85baadf7bb',
20 silly publish   _from: '.' }
21 verbose getPublishConfig undefined
22 silly mapToRegistry name strings.js
23 silly mapToRegistry using default registry
24 silly mapToRegistry registry https://registry.npmjs.org/
25 silly mapToRegistry data Result {
25 silly mapToRegistry   raw: 'strings.js',
25 silly mapToRegistry   scope: null,
25 silly mapToRegistry   name: 'strings.js',
25 silly mapToRegistry   rawSpec: '',
25 silly mapToRegistry   spec: 'latest',
25 silly mapToRegistry   type: 'tag' }
26 silly mapToRegistry uri https://registry.npmjs.org/strings.js
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /Users/dvandersluis/.npm/strings.js/1.2.8/package.tgz
29 verbose request uri https://registry.npmjs.org/strings.js
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 8:56:08 PM
32 verbose request using bearer token for auth
33 verbose request id 7f7cfc679dc58807
34 http request PUT https://registry.npmjs.org/strings.js
35 http 403 https://registry.npmjs.org/strings.js
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '95',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Sun, 05 Jun 2016 17:56:09 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-fra1236-FRA',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1465149367.536949,VS0,VE2062',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /Users/dvandersluis/.npm/registry.npmjs.org/strings.js on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 1.2.8." : strings.js
39 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:200:22)
39 verbose stack     at emitTwo (events.js:87:13)
39 verbose stack     at Request.emit (events.js:172:7)
39 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1067:10)
39 verbose stack     at emitOne (events.js:82:20)
39 verbose stack     at Request.emit (events.js:169:7)
39 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:988:12)
40 verbose statusCode 403
41 verbose pkgid strings.js
42 verbose cwd /Users/dvandersluis/devel/strings.js
43 error Darwin 14.5.0
44 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
45 error node v4.4.5
46 error npm  v2.15.5
47 error code E403
48 error "You cannot publish over the previously published version 1.2.8." : strings.js
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
