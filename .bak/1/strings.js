// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var Chars, Strings, Types, asciiStringType, changeCase, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Types = {};

  (function() {
    var breakIfEqual, testValues, typesPredicates;
    testValues = function(predicate, breakState, values) {
      var value, _i, _len;
      if (values == null) {
        values = [];
      }
      if (values.length < 1) {
        return false;
      }
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        if ((predicate(value)) === breakState) {
          return breakState;
        }
      }
      return !breakState;
    };
    typesPredicates = {
      'Undefined': function(value) {
        return value === void 0;
      },
      'Null': function(value) {
        return value === null;
      },
      'Boolean': function(value) {
        return typeof value === 'boolean';
      },
      'String': function(value) {
        return typeof value === 'string';
      },
      'Function': function(value) {
        return typeof value === 'function';
      },
      'Number': function(value) {
        return (typeof value === 'number') && (value === value);
      },
      'Array': function(value) {
        return (typeof value === 'object') && (value instanceof Array);
      },
      'RegExp': function(value) {
        return value instanceof RegExp;
      },
      'Date': function(value) {
        return value instanceof Date;
      },
      'Object': function(value) {
        return (typeof value === 'object') && !(value instanceof Array) && !(value instanceof RegExp) && !(value === null);
      },
      'NaN': function(value) {
        return (typeof value === 'number') && (value !== value);
      }
    };
    typesPredicates.StringOrNumber = function(value) {
      return typesPredicates.isString(value) || typesPredicates.isNumber(value);
    };
    breakIfEqual = true;
    (function() {
      var name, predicate, _results;
      _results = [];
      for (name in typesPredicates) {
        predicate = typesPredicates[name];
        _results.push((function(name, predicate) {
          Types['is' + name] = predicate;
          Types['not' + name] = function(value) {
            return !predicate(value);
          };
          Types['has' + name] = function() {
            return testValues(predicate, breakIfEqual, arguments);
          };
          return Types['all' + name] = function() {
            return testValues(predicate, !breakIfEqual, arguments);
          };
        })(name, predicate));
      }
      return _results;
    })();
    return Types["typeof"] = function(value) {
      var predicate, type;
      for (type in typesPredicates) {
        predicate = typesPredicates[type];
        if (predicate(value) === true) {
          return type.toLowerCase();
        }
      }
    };
  })();

  _ = (function(_super) {
    __extends(_, _super);

    function _() {
      return _.__super__.constructor.apply(this, arguments);
    }

    _.inRange = function(nr, min, max) {
      var _ref;
      if (_.isArray(min)) {
        _ref = min, min = _ref[0], max = _ref[1];
      }
      return nr >= min && nr <= max;
    };

    _.limitNumber = function(nr, _arg) {
      var max, min;
      min = _arg[0], max = _arg[1];
      if (!Types.allNumber(nr, min, max)) {
        return nr;
      }
      if (nr > max) {
        return max;
      }
      if (nr < min) {
        return min;
      }
      return nr;
    };

    _.randomNumber = function(min, max) {
      var range;
      if (max == null) {
        if (min < 0) {
          max = 0;
        } else {
          max = min;
          min = 0;
        }
      }
      range = (max - (min != null ? min : min = 0)) + 1;
      return Math.floor((Math.random() * range) + min);
    };

    _.shuffleArray = function(target) {
      var i, length, rand, temp, _i;
      if (_.notArray(target) || target.length < 1) {
        return target;
      }
      length = target.length - 1;
      for (i = _i = length; length <= 0 ? _i <= 0 : _i >= 0; i = length <= 0 ? ++_i : --_i) {
        rand = _.randomNumber(i);
        temp = target[i];
        target[i] = target[rand];
        target[rand] = temp;
      }
      return target;
    };

    _.positiveIndex = function(index, max) {
      if (max == null) {
        max = 0;
      }
      if (_.isNumber(index) && index !== 0) {
        if (Math.abs(index) <= max) {
          if (index > 0) {
            return index - 1;
          }
          return max + index;
        }
      }
      return false;
    };

    return _;

  })(Types);

  Chars = (function(_super) {
    __extends(Chars, _super);

    function Chars() {
      return Chars.__super__.constructor.apply(this, arguments);
    }

    Chars.ASCII_RANGE_UPPERCASE = [65, 90];

    Chars.ASCII_RANGE_LOWERCASE = [97, 122];

    Chars.ASCII_RANGE_NUMBERS = [48, 57];

    Chars.ASCII_RANGE_ALL = [32, 126];

    Chars.REGEXP_SPECIAL_CHARS = ['?', '\\', '[', ']', '(', ')', '*', '+', '.', '/', '|', '^', '$', '<', '>', '-', '&'];

    Chars.ascii = function(ordinal) {
      return String.fromCharCode(ordinal);
    };

    Chars.ordinal = function(char) {
      if (_.notString(char)) {
        return null;
      }
      return char.charCodeAt();
    };

    Chars.isUpper = function(char) {
      return _.inRange(Chars.ordinal(char), Chars.ASCII_RANGE_UPPERCASE);
    };

    Chars.isLower = function(char) {
      return _.inRange(Chars.ordinal(char), Chars.ASCII_RANGE_LOWERCASE);
    };

    Chars.isAlpha = function(char) {
      return Chars.isUpper(char) || Chars.isLower(char);
    };

    Chars.isNumeric = function(char) {
      return _.inRange(Chars.ordinal(char), Chars.ASCII_RANGE_NUMBERS);
    };

    Chars.isAlphaNumeric = function(char) {
      return Chars.isAlpha(char) || Chars.isNumeric(char);
    };

    Chars.random = function(range) {
      var max, min;
      if (range == null) {
        range = Chars.ASCII_RANGE_ALL;
      }
      if (_.notArray(range) || range.length < 2) {
        return '';
      }
      min = _.limitNumber(range[0], Chars.ASCII_RANGE_ALL);
      max = _.limitNumber(range[1], Chars.ASCII_RANGE_ALL);
      return Chars.ascii(_.randomNumber(min, max));
    };

    return Chars;

  })(_);

  changeCase = function() {
    var arg, args, caseMethod, pos, string, _i, _j, _len, _len1;
    string = arguments[0], caseMethod = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (string == null) {
      string = '';
    }
    if (_.notString(string)) {
      return string;
    }
    if (args.length < 1) {
      return string[caseMethod]();
    } else if (_.isNumber(args[0])) {
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        pos = _.positiveIndex(arg, string.length);
        string = Strings.xs(string, function(char, index) {
          if (index === pos) {
            return char[caseMethod]();
          }
          return char;
        });
      }
    } else if (_.isString(args[0])) {
      for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
        arg = args[_j];
        string = Strings.replace(string, arg, arg[caseMethod](), 'gi');
      }
    }
    return string;
  };

  asciiStringType = function(string, method) {
    var char, _i, _len;
    if (!string || _.notString(string)) {
      return false;
    }
    for (_i = 0, _len = string.length; _i < _len; _i++) {
      char = string[_i];
      if (!method(char)) {
        return false;
      }
    }
    return true;
  };

  Strings = (function(_super) {
    __extends(Strings, _super);

    Strings.create = function() {
      var arg, string, _i, _len;
      string = '';
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        if (_.isString(arg) || _.isNumber(arg)) {
          string += arg;
        }
      }
      return string;
    };

    Strings.random = function(amount, charSet) {
      var i, string, _i;
      if (amount == null) {
        amount = 1;
      }
      if (!_.stringOrNumber(amount) || (amount < 1)) {
        return '';
      }
      string = '';
      for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
        string += Chars.random(charSet);
      }
      return string;
    };

    Strings.times = function(string, amount) {
      var copy;
      if (amount == null) {
        amount = 1;
      }
      if (_.notString(string || _.notNumber(amount))) {
        return '';
      }
      copy = string;
      while (--amount > 0) {
        string += copy;
      }
      return string;
    };

    Strings.regEscape = function(string) {
      if (_.notString(string)) {
        return '';
      }
      return Strings.xs(string, function(char) {
        if (__indexOf.call(Chars.REGEXP_SPECIAL_CHARS, char) >= 0) {
          return '\\' + char;
        } else {
          return true;
        }
      });
    };

    Strings.empty = function(string) {
      if (_.notString(string)) {
        return false;
      }
      if (string.length < 1) {
        return true;
      }
      return false;
    };

    Strings.isAlpha = function(string) {
      return asciiStringType(string, Chars.isAlpha);
    };

    Strings.isNumeric = function(string) {
      return asciiStringType(string, Chars.isNumeric);
    };

    Strings.isAlphaNumeric = function(string) {
      return asciiStringType(string, Chars.isAlphaNumeric);
    };

    Strings.isSpace = function(string) {
      if (string == null) {
        string = '';
      }
      if (_.notString(string)) {
        return false;
      }
      string = Strings.oneSpace(string);
      return string === ' ' || string === '\t';
    };

    Strings.xs = function(string, callback) {
      var index, length, response, result, _i;
      if (string == null) {
        string = '';
      }
      if (callback == null) {
        callback = function(char) {
          return char;
        };
      }
      if (_.notString(string) || _.notFunction(callback)) {
        return '';
      }
      result = '';
      length = string.length - 1;
      if (length < 0) {
        return result;
      }
      for (index = _i = 0; 0 <= length ? _i <= length : _i >= length; index = 0 <= length ? ++_i : --_i) {
        if (response = callback(string[index], index)) {
          if (response === true) {
            result += string[index];
          } else if (_.stringOrNumber(response)) {
            result += response;
          }
        }
      }
      return result;
    };

    Strings.copy = function(string, offset, amount) {
      if (_.notString(string)) {
        return '';
      }
      if (offset > 0) {
        --offset;
      }
      return string.substr(offset, amount);
    };

    Strings.replace = function(string, toReplace, replacement, flags) {
      var toReplaceIsString;
      if (string == null) {
        string = '';
      }
      if (toReplace == null) {
        toReplace = '';
      }
      if (replacement == null) {
        replacement = '';
      }
      if (flags == null) {
        flags = 'g';
      }
      if (!(_.isString(string) && ((toReplaceIsString = _.stringOrNumber(toReplace)) || _.isRegExp(toReplace)))) {
        if (_.isString(string)) {
          return string;
        }
        return '';
      }
      if (toReplaceIsString) {
        toReplace = Strings.regEscape(toReplace + '');
        toReplace = new RegExp(toReplace, flags);
      }
      return string.replace(toReplace, replacement);
    };

    Strings.trim = function(string) {
      return Strings.replace(string, /^\s+|\s+$/g);
    };

    Strings.trimLeft = function(string) {
      return Strings.replace(string, /^\s+/g);
    };

    Strings.trimRight = function(string) {
      return Strings.replace(string, /\s+$/g);
    };

    Strings.oneSpace = function(string) {
      var skip;
      skip = false;
      return Strings.xs(string, function(char) {
        if (char === ' ' || char === '\t') {
          if (skip === false) {
            skip = true;
            return ' ';
          }
        } else {
          skip = false;
          return true;
        }
      });
    };

    Strings.oneSpaceAndTrim = function(string) {
      return Strings.oneSpace(Strings.trim(string));
    };

    Strings.toCamel = function(string, char) {
      var match;
      if (char == null) {
        char = '-';
      }
      if (_.notString(char)) {
        return string;
      }
      match = new RegExp(Strings.regEscape(char) + '([a-z])', 'ig');
      return Strings.replace(string, match, function(all, found) {
        return found.toUpperCase();
      });
    };

    Strings.unCamel = function(string, insertion) {
      if (insertion == null) {
        insertion = '-';
      }
      if (!_.isString(insertion)) {
        insertion = '';
      }
      return Strings.replace(string, /([A-Z])/g, insertion + '$1').toLowerCase();
    };

    Strings.shuffle = function(string) {
      if (_.isString(string)) {
        return _.shuffleArray(string.split('')).join('');
      }
      return '';
    };

    Strings.find = function(string, toFind) {
      var indices, result;
      indices = [];
      if (!toFind || _.notString(string)) {
        return indices;
      }
      if (_.stringOrNumber(toFind)) {
        toFind = new RegExp(Strings.regEscape(toFind + ''), 'g');
      } else if (_.isRegExp(toFind)) {
        toFind = new RegExp(toFind.source, 'g');
      } else {
        return indices;
      }
      while (result = toFind.exec(string)) {
        indices.push(result.index + 1);
      }
      return indices;
    };

    Strings.count = function(string, toFind) {
      return Strings.find(string, toFind).length;
    };

    Strings.contains = function(string, substring) {
      return Strings.find(string, substring).length > 0;
    };

    Strings.between = function(string, before, after) {
      var reg, _ref;
      if (_.notString(string || !(_.stringOrNumber(before, after)))) {
        return '';
      }
      before = Strings.regEscape(before + '');
      after = Strings.regEscape(after + '');
      reg = new RegExp(before + '(.+)' + after);
      return ((_ref = reg.exec(string)) != null ? _ref[1] : void 0) || '';
    };

    Strings.slice = function(string, start, size) {
      if (_.notString(string)) {
        return '';
      }
      if (false !== (start = _.positiveIndex(start, string.length))) {
        return string.slice(start, start + size);
      }
      return '';
    };

    Strings.truncate = function(string, length, appendix) {
      if (length == null) {
        length = string.length;
      }
      if (appendix == null) {
        appendix = '';
      }
      string = Strings.slice(string, 1, length);
      return string += appendix;
    };

    Strings.pop = function(string, amount) {
      var i, length, newstr, _i;
      if (string == null) {
        string = '';
      }
      if (amount == null) {
        amount = 1;
      }
      if (_.isString(string)) {
        length = string.length;
        amount = (length - Math.abs(amount)) - 1;
        if (amount >= 0 && amount < length) {
          newstr = '';
          for (i = _i = 0; 0 <= amount ? _i <= amount : _i >= amount; i = 0 <= amount ? ++_i : --_i) {
            newstr += string[i];
          }
          return newstr;
        }
      }
      return '';
    };

    Strings.split = function(string, delimiter) {
      var array, index, result, _i, _len;
      if (delimiter == null) {
        delimiter = ' ';
      }
      if (_.notString(string) || !_.stringOrNumber(delimiter)) {
        return string;
      }
      string = Strings.oneSpaceAndTrim(string);
      result = [];
      array = string.split(delimiter);
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        index = array[_i];
        if (index === '') {
          continue;
        }
        result.push(index);
      }
      return result;
    };

    Strings.reverse = function(string) {
      var ch, length, reversed, _i;
      if (string == null) {
        string = '';
      }
      if (_.notString(string)) {
        return '';
      }
      reversed = '';
      length = string.length - 1;
      if (length < 1) {
        return string;
      }
      for (ch = _i = length; length <= 0 ? _i <= 0 : _i >= 0; ch = length <= 0 ? ++_i : --_i) {
        reversed += string[ch];
      }
      return reversed;
    };

    Strings.upper = function() {
      var args, string;
      string = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return changeCase.apply(null, [string, 'toUpperCase'].concat(__slice.call(args)));
    };

    Strings.lower = function() {
      var args, string;
      string = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return changeCase.apply(null, [string, 'toLowerCase'].concat(__slice.call(args)));
    };

    Strings.insert = function(string, index, insertion) {
      if (_.stringOrNumber(insertion) && false !== (index = _.positiveIndex(index, string.length))) {
        return string.substr(0, index) + insertion + string.substr(index);
      }
      return string;
    };

    Strings.removeIndex = function(string, offset, amount) {
      var endpoint;
      if (_.notString(string)) {
        return '';
      }
      offset = _.positiveIndex(offset, string.length);
      endpoint = offset + amount;
      return Strings.xs(string, function(char, index) {
        if ((index < offset) || (index >= endpoint)) {
          return true;
        }
      });
    };

    Strings.remove = function() {
      var remove, string, toRemove, _i, _len;
      string = arguments[0], toRemove = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (string == null) {
        string = '';
      }
      if (_.notString(string)) {
        return '';
      }
      if (toRemove.length < 1) {
        return string;
      }
      for (_i = 0, _len = toRemove.length; _i < _len; _i++) {
        remove = toRemove[_i];
        string = Strings.replace(string, remove);
      }
      return string;
    };

    Strings.startsWith = function(string, start) {
      return Strings.find(string, start)[0] === 1;
    };

    Strings.endsWith = function(string, ending) {
      ending = new RegExp(Strings.regEscape(ending) + '$');
      return ending.test(string);
    };

    Strings.wrap = function(prepend, append) {
      var wrapper;
      if (prepend == null) {
        prepend = '';
      }
      if (append == null) {
        append = '';
      }
      wrapper = function(string) {
        return Strings.create(prepend, string, append);
      };
      wrapper.wrap = function(outerPrepend, outerAppend) {
        if (outerPrepend == null) {
          outerPrepend = '';
        }
        if (outerAppend == null) {
          outerAppend = '';
        }
        if (!_.stringOrNumber(outerPrepend, outerAppend)) {
          return;
        }
        prepend = outerPrepend + prepend;
        return append += outerAppend;
      };
      return wrapper;
    };

    function Strings() {
      this.set.apply(this, arguments);
      Object.defineProperty(this, '$', {
        get: function() {
          return this.get();
        }
      });
      Object.defineProperty(this, 'length', {
        get: function() {
          return this.string.length;
        }
      });
      Object.defineProperty(this, 'wrap', {
        get: function() {
          if (!_.isUndefined(this.wrapMethod)) {
            return this.wrapMethod(this.string);
          }
          return this.string;
        }
      });
    }

    Strings.prototype.set = function() {
      var newString;
      newString = Strings.create.apply(this, arguments);
      if (newString !== '') {
        this.string = newString;
      }
      return this;
    };

    Strings.prototype.random = function(amount, charSet) {
      this.string = Strings.random(amount, charSet);
      return this;
    };

    Strings.prototype.xs = function(callback) {
      this.string = Strings.xs(this.string, callback);
      return this;
    };

    Strings.prototype.times = function(amount) {
      this.string = Strings.times(this.string, amount);
      return this;
    };

    Strings.prototype.get = function() {
      var position, string, _i, _len;
      if (arguments.length > 0) {
        string = '';
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          position = arguments[_i];
          position = _.positiveIndex(position, this.length);
          if (position !== false) {
            string += this.string[position];
          }
        }
        return string;
      }
      return this.string;
    };

    Strings.prototype.copy = function(offset, amount) {
      return Strings.copy(this.string, offset, amount);
    };

    Strings.prototype.empty = function() {
      return Strings.empty(this.string);
    };

    Strings.prototype.isAlpha = function() {
      return Strings.isAlpha(this.string);
    };

    Strings.prototype.isNumeric = function() {
      return Strings.isNumeric(this.string);
    };

    Strings.prototype.isAlphaNumeric = function() {
      return Strings.isAlphaNumeric(this.string);
    };

    Strings.prototype.push = function(string) {
      if (string == null) {
        string = '';
      }
      if (_.stringOrNumber(string)) {
        this.string += string;
      }
      return this;
    };

    Strings.prototype.pop = function(amount) {
      this.string = Strings.pop(this.string, amount);
      return this;
    };

    Strings.prototype.shift = function(string) {
      if (_.stringOrNumber(string)) {
        this.string = string + this.string;
      }
      return this;
    };

    Strings.prototype.insert = function(string, position) {
      if (string == null) {
        string = '';
      }
      if (position == null) {
        position = 0;
      }
      this.string = Strings.insert(this.string, position, string);
      return this;
    };

    Strings.prototype.trim = function() {
      this.string = Strings.trim(this.string);
      return this;
    };

    Strings.prototype.trimLeft = function() {
      this.string = Strings.trimLeft(this.string);
      return this;
    };

    Strings.prototype.trimRight = function() {
      this.string = Strings.trimRight(this.string);
      return this;
    };

    Strings.prototype.oneSpace = function() {
      this.string = Strings.oneSpace(this.string);
      return this;
    };

    Strings.prototype.oneSpaceAndTrim = function() {
      this.string = Strings.oneSpaceAndTrim(this.string);
      return this;
    };

    Strings.prototype.find = function(string) {
      return Strings.find(this.string, string);
    };

    Strings.prototype.count = function(string) {
      return Strings.count(this.string, string);
    };

    Strings.prototype.contains = function(string) {
      return Strings.contains(this.string, string);
    };

    Strings.prototype.between = function(before, after) {
      return Strings.between(this.string, before, after);
    };

    Strings.prototype.slice = function(start, size) {
      this.string = Strings.slice(this.string, start, size);
      return this;
    };

    Strings.prototype.truncate = function(size, suffix) {
      Strings.truncate(this.string, size, suffix);
      return this;
    };

    Strings.prototype.remove = function() {
      var strings;
      strings = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.string = Strings.remove.apply(Strings, [this.string].concat(__slice.call(strings)));
      return this;
    };

    Strings.prototype.removeIndex = function(offset, amount) {
      this.string = Strings.removeIndex(this.string, offset, amount);
      return this;
    };

    Strings.prototype.replace = function(subString, replacement, flags) {
      this.string = Strings.replace(this.string, subString, replacement, flags);
      return this;
    };

    Strings.prototype.reverse = function() {
      this.string = Strings.reverse(this.string);
      return this;
    };

    Strings.prototype.upper = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.string = Strings.upper.apply(Strings, [this.string].concat(__slice.call(args)));
      return this;
    };

    Strings.prototype.lower = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.string = Strings.lower.apply(Strings, [this.string].concat(__slice.call(args)));
      return this;
    };

    Strings.prototype.shuffle = function() {
      this.string = Strings.shuffle(this.string);
      return this;
    };

    Strings.prototype.toCamel = function(char) {
      this.string = Strings.toCamel(this.string, char);
      return this;
    };

    Strings.prototype.unCamel = function(insertion) {
      this.string = Strings.unCamel(this.string, insertion);
      return this;
    };

    Strings.prototype.toUnderscore = function() {
      this.string = Strings.toUnderscore(this.string);
      return this;
    };

    Strings.prototype.startsWith = function() {
      return function(start) {
        return Strings.startsWith(this.string, start);
      };
    };

    Strings.prototype.endsWith = function() {
      return function(ending) {
        return Strings.endsWith(this.string, ending);
      };
    };

    Strings.prototype.setWrap = function(prepend, append) {
      if (this.wrapMethod) {
        this.wrapMethod.wrap(prepend, append);
      } else {
        this.wrapMethod = Strings.wrap(prepend, append);
      }
      return this;
    };

    Strings.prototype.removeWrap = function() {
      this.wrapMethod = void 0;
      return this;
    };

    Strings.prototype.applyWrap = function(prepend, append) {
      this.string = this.setWrap(prepend, append).wrap;
      this.removeWrap();
      return this;
    };

    return Strings;

  })(Chars);

  if (typeof window !== "undefined" && window !== null) {
    window.Strings = Strings;
  } else {
    module.exports = Strings;
  }

}).call(this);
