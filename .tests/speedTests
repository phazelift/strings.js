// Speed tests are done by measuring the difference between the start and end time.
// Every run runs 10 times a certain amount of calls and measures the average time of all 10 results.

// The tests are not scientific at all, and are meant to give an impression of the average running speeds.
// Also, measuring times will be different with the slightest change to the arguments given, so therefore
// I used 'hello world' as a base in pretty much all examples.

// All tests are done in node.js.

// I expect these tests to run considerably faster on most pc's as my trusty pc is aging (8 years).
// You can at least see the average difference between the speed of strings.js different methods.

// A once in a while I do some speed-optimization for strings.js, and update the results in this file.

// Only the static methods of strings.js are tested for now.

// Three categories:
//							- fast	: 1.000.000 times
//							- average:   100.000 times
//							- slow	:    10.000 times

// fast:
Strings.empty( 'hello world!' );							// 30ms
Strings.isSpace( 'hello world' );						// 63ms
Strings.create( 'hello world!' );						// 72ms
Strings.isSpecial( 'hello world' );						// 111ms
Strings.isNumeric( 'hello world' );						// 117ms
Strings.isAlpha( 'hello world' );						// 122ms
Strings.isAlphaNumeric( 'hello world' );				// 130ms
Strings.pop( 'hello world!' , 5 );						// 138ms
Strings.copy( 'hello world!', 3, 2 );					// 160ms
Strings.slice( 'hello world!', 0, 5 );					// 292ms
Strings.times( '!', 10 );									// 315ms
Strings.reverse( 'hello world!' );						// 400ms

// average:
Strings.truncate( 'hello world!', 5 );					// 56ms
Strings.xs( 'hello world!', function(ch){
	if ( ch === ' ' )
		return true;
});																// 68ms
Strings.trimLeft( ' \t hello world! \t ' );			// 77ms
Strings.trim( ' \t hello world! \t ' );				// 80ms
Strings.trimRight( ' \t hello world! \t ' );			// 87ms
Strings.oneSpace( 'hello  /t world!' );				// 110ms
Strings.sort( 'hello world!' );							// 111ms
Strings.unCamel( 'helloWorld!', ' ' );					// 127ms
Strings.removeRange( 'hello world!', 5, 1 );			// 136ms
Strings.endsWith( 'hello world!', '!' );				// 137ms
Strings.get( test.string, 1, 2 );						// 144ms
Strings.oneSpaceAndTrim( ' hello /t world! ' );		// 190ms
Strings.contains( 'hello world!', ' ' );				// 190ms
Strings.count( 'hello world!', ' ' );					// 195ms
Strings.find( 'hello world!', ' ' );					// 221ms
Strings.replace( 'hello world!', '!', '?' );			// 244ms
Strings.between( 'hello world!', 'h', '!' );			// 263ms
Strings.startsWith( 'hello world!', 'hello' );		// 263ms
Strings.regEscape( '[hello world!]' );					// 327ms
Strings.insert( 'hello world!', ' cruel', 6 );		// 370ms
Strings.split( 'hello world!', ' ' );					// 412ms

// slow:
Strings.removePos( 'hello world!', 1, -3 );			// 63ms
Strings.toCamel( 'hello world!', ' ' );				// 65ms
Strings.shuffle( 'hello world!' );						// 69ms
Strings.remove( 'hello world!', 'hello ' );			// 79ms
Strings.lower( 'hello world!', 'h', 'w' );			// 118ms
Strings.upper( 'hello world!', 'h', 'w' );			// 120ms
Strings.random(10);											// 216ms